 》》写一个Python程序，实现以下功能
1.在命令行输入内容，保存到“question”字符串
2.导入“api”包，把“question”字符串传入api.document_read()函数
3. 在上一步api.document_read()函数返回的字符串中匹配从“```”到下一个“```”之间的字符再去掉匹配到的字符的第一行，把这部分字符用utf-8编码写入当前目录下“document”文件夹中的code.py（如果当前目录下“document”文件夹没有code.py则创建code. py，如果当前目录下“document”文件夹已有code. py则覆盖code. py中的内容）
4.运行当前目录下“document”文件夹中的code.py，把程序的输出内容保存到“document_read”字符串。如果code.py报错则输出“程序无法正常运行”并结束程序如果code.py没有输出内容则输出“未读取到内容”并结束程序
5.在“document_read”字符串中匹配“--end----”字符，如果没有匹配到“--end----”，继续后面的步骤；如果匹配到“--end----”，把“document_read”字符串复制到“document_save”字符串，后面的步骤改为多线程同时进行，把“document_save”字符串中根据“--end----”分割的每段内容分别作为“document_read”字符串的内容传入每个线程，并在后面每个步骤保存code.py时在文件名后添加进程编号（运行code.py的步骤也改为对应文件名），输出字符串时在前面加上进程编号，结束程序的操作改为结束相应线程。创建线程间隔0.05秒，同时运行的线程达到64个则暂停创建线程。
6.把“document_read”字符串和“question”字符串传入api.document_modify()函数（顺序为api.document_modify(document_read, question)）
7. 在上一步api.document_modify()函数返回的字符串中匹配从“```”到下一个“```”之间的字符再去掉匹配到的字符的第一行，把这部分字符用utf-8编码写入当前目录下“document”文件夹中的code.py（如果当前目录下“document”文件夹没有code.py则创建code. py，如果当前目录下“document”文件夹已有code. py则覆盖code. py中的内容）
8.运行当前目录下“document”文件夹中的code.py，如果code.py报错则输出“程序无法正常运行”并结束程序如果code.py正常运行则输出“文件处理完成”并结束程序
》
```python
import sys
import re
import os
import subprocess
import threading
import time

def read_input():
    return input("请输入内容: ")

def extract_code(text):
    pattern = r"```(.*?)```"
    matches = re.findall(pattern, text, re.DOTALL)
    if matches:
        return "\n".join(matches[0].splitlines()[1:])
    return None

def write_code_to_file(code, filename):
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(code)

def run_code(filename):
    try:
        result = subprocess.run(['python', filename], capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError:
        return "程序无法正常运行"

def process_document(question, api):
    document_read = api.document_read(question)
    code = extract_code(document_read)
    if code:
        write_code_to_file(code, 'document/code.py')
        output = run_code('document/code.py')
        if output == "程序无法正常运行":
            print(output)
            return
        if not output:
            print("未读取到内容")
            return
        document_read = output
    else:
        print("未读取到内容")
        return

    if "--end----" in document_read:
        document_save = document_read
        segments = document_save.split("--end----")
        threads = []
        thread_count = 0

        def thread_task(segment, thread_id):
            document_read = segment
            modified_document = api.document_modify(document_read, question)
            code = extract_code(modified_document)
            if code:
                filename = f'document/code_{thread_id}.py'
                write_code_to_file(code, filename)
                output = run_code(filename)
                if output == "程序无法正常运行":
                    print(f"线程{thread_id}: 程序无法正常运行")
                else:
                    print(f"线程{thread_id}: 文件处理完成")
            else:
                print(f"线程{thread_id}: 未读取到内容")

        for segment in segments:
            if thread_count >= 64:
                for t in threads:
                    t.join()
                threads = []
                thread_count = 0
            thread = threading.Thread(target=thread_task, args=(segment, thread_count))
            threads.append(thread)
            thread.start()
            thread_count += 1
            time.sleep(0.05)

        for t in threads:
            t.join()
    else:
        modified_document = api.document_modify(document_read, question)
        code = extract_code(modified_document)
        if code:
            write_code_to_file(code, 'document/code.py')
            output = run_code('document/code.py')
            if output == "程序无法正常运行":
                print(output)
            else:
                print("文件处理完成")
        else:
            print("未读取到内容")

def main():
    if not os.path.exists('document'):
        os.makedirs('document')

    question = read_input()
    import api
    process_document(question, api)

if __name__ == "__main__":
    main()
```